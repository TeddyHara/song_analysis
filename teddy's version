from dataclasses import dataclass
import csv
import math
import re

@dataclass
class Song:
    id: int
    title: str
    year: int
    artist: str
    genre: str
    lyrics: list

"""
Place your answers to the Design check questions here:

1.

2.

"""

bad_characters = re.compile(r"[^\w]")

def clean_word(word: str) -> str:
    """input: string
    output: string
    description: using the bad characters regular expression, this function strips out invalid
    characters
    """
    word = word.strip().lower()
    return bad_characters.sub("", word)

def clean_lyrics(lyrics: str) -> list:
    """input: string representing the lyrics for a song
    output: a list with each of the words for a song
    description: this function parses through all of the lyrics for a song and makes sure
    they contain valid characters
    """
    lyrics = lyrics.replace("\n", " ")
    return [clean_word(word) for word in lyrics.split(" ")]

def create_corpus(filename: str) -> list:
    """input: a filename
    output: a list of Songs
    description: this function is responsible for creating the collection of songs, including some data cleaning
    """
    with open(filename) as f:
        corpus = []
        iden = 0
        for s in csv.reader(f):
            if s[4] != "Not Available":
                new_song = Song(iden, s[1], s[2], s[3], s[4], clean_lyrics(s[5]))
                corpus.append(new_song)
                iden += 1
        return corpus

def compute_idf(corpus: list) -> dict:
    """input: a list of Songs
    output: a dictionary from words to inverse document frequencies (as floats)
    description: this function is responsible for calculating inverse document
      frequencies of every word in the corpus
    """
    """
    idf_dict = {}
    numerator = len(set(corpus)) #not sure if this is good bc what if have empty song, do you still count as a document? doesn't count the same song twice
    for item in corpus:
        temp_dict = {}
        for words in item[5]:
            if words not in temp_dict:
                temp_dict[words] = 1
        for key, _ in temp_dict.items():
            if key not in idf_dict:
                idf_dict[key] = 1
            elif key in idf_dict:
                idf_dict[key] += 1
    idf_dict = {key: math.log(numerator / value) for key, value in idf_dict.items()}
    return idf_dict
    """
    idf_dict = {}
    total_songs = len(corpus)

    for song in corpus:
        words_in_song = set(song[5]) 
        for word in words_in_song:
            if word not in idf_dict:
                idf_dict[word] = 1
            else:
                idf_dict[word] += 1

    idf_dict = {key: math.log(total_songs / value) for key, value in idf_dict.items()}
    return idf_dict


def compute_tf(song_lyrics: list) -> dict:
    """input: list representing the song lyrics
    output: dictionary containing the term frequency for that set of lyrics
    description: this function calculates the term frequency for a set of lyrics
    """
    tf_dict = {}
    for item in song_lyrics:
        if item in tf_dict:
            tf_dict[item] +=1
        else: 
            tf_dict[item] = 1
    return tf_dict

def compute_tf_idf(song_lyrics: list, corpus_idf: dict) -> dict:
    """input: a list representing the song lyrics and an inverse document frequency dictionary
    output: a dictionary with tf-idf weights for the song (words to weights)
    description: this function calculates the tf-idf weights for a song
    """
    tf_dict = compute_tf(song_lyrics)
    tf_idf_dict = {}
    for word, tf_value in tf_dict.items():
        if word in corpus_idf:
            tf_idf_dict[word] = tf_value*corpus_idf[word]
    return tf_idf_dict

def compute_corpus_tf_idf(corpus: list, corpus_idf: dict) -> dict:
    """input: a list of songs and an idf dictionary
    output: a dictionary from song ids to tf-idf dictionaries
    description: calculates tf-idf weights for an entire corpus
    """
    corpus_tf_idf_dict = {}
    for song in corpus:
        corpus_tf_idf_dict[song[0]] = compute_tf_idf(song[5], corpus_idf)
    return corpus_tf_idf_dict

def cosine_similarity(l1: dict, l2: dict) -> float:
    """input: dictionary containing the term frequency - inverse document frequency weights (tf-idf) for a song,
    dictionary containing the term frequency - inverse document frequency weights (tf-idf) for a song
    output: float representing the similarity between the values of the two dictionaries
    description: this function finds the similarity score between two dictionaries by representing them as vectors and comparing their proximity.
    """
    magnitude1 = math.sqrt(sum(w * w for w in l1.values()))
    magnitude2 = math.sqrt(sum(w * w for w in l2.values()))
    dot = sum(l1[w] * l2.get(w, 0) for w in l1)
    return dot / (magnitude1 * magnitude2)

def nearest_neighbor(
    song_lyrics: str, corpus: list, corpus_tf_idf: dict, corpus_idf: dict
) -> Song:
    """input: a string representing the lyrics for a song, a list of songs,
      tf-idf weights for every song in the corpus, and idf weights for every word in the corpus
    output: a Song object
    description: this function produces the song in the corpus that is most similar to the lyrics it is given
    """
    song_tf_idf = compute_tf_idf(song_lyrics,corpus_idf)
    song_dict = {}

    for id, tf_idf_dict in corpus_tf_idf.items():
        song_dict[id] = cosine_similarity(song_tf_idf, tf_idf_dict)
    most_similar_id =  max(song_dict, key=lambda k: song_dict[k]) #is the max float the most similar?

    for songs in corpus:
        if most_similar_id == songs[0]:
            return songs[1]
    

def main(filename: str, lyrics: str):
    corpus = create_corpus(filename)
    corpus_idf = compute_idf(corpus)
    corpus_tf_idf = compute_corpus_tf_idf(corpus, corpus_idf)
    print(nearest_neighbor(lyrics, corpus, corpus_tf_idf, corpus_idf).genre)
